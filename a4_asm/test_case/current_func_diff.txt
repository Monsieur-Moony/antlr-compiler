diff --git a/a4/test_case/func.s b/a4/test_case/func.s
index 06d0ee9..ba0c28c 100755
--- a/a4/test_case/func.s
+++ b/a4/test_case/func.s
@@ -90,26 +90,28 @@
 # L_70		LABEL	0	1584
 # L_71		LABEL	0	1600
 # L_72		LABEL	0	1616
-# L_73		LABEL	0	1680
-# L_74		LABEL	0	1696
-# L_75		LABEL	0	1728
-# L_76		LABEL	0	1744
-# L_77		LABEL	0	1760
-# "i = fun(n[%d]) = %d\n"		STR	0	1776
-# L_78		LABEL	0	1808
-# L_79		LABEL	0	1824
-# L_80		LABEL	0	1840
-# L_81		LABEL	0	1856
-# L_82		LABEL	0	1872
+# L_73		LABEL	0	1696
+# L_74		LABEL	0	1712
+# L_75		LABEL	0	1744
+# L_76		LABEL	0	1760
+# L_77		LABEL	0	1776
+# "i = fun(n[%d]) = %d\n"		STR	0	1792
+# L_78		LABEL	0	1824
+# L_79		LABEL	0	1840
+# L_80		LABEL	0	1856
+# L_81		LABEL	0	1872
+# L_82		LABEL	0	1888
 #-------------------------------------
 #-------------------------------------
 # fun		INT	0	144
 # 176		INT	0	176
 # main		VOID	0	192
-# 1888		INT	0	1888
+# 1904		INT	0	1904
 #-------------------------------------
 #-------------------------------------
 # i		INT	0	16
+#-------------------------------------
+#-------------------------------------
 # printf		STR	0	96
 # 2		INT	0	112
 #-------------------------------------
@@ -137,26 +139,25 @@
 # t_10		INT	0	1056
 # 0		INT	0	1184
 # t_11		BOOLEAN	0	1200
-# i		INT	0	1264
-# 2		INT	0	1280
 # 1		INT	0	1440
 # 3		INT	0	1472
 # t_12		INT	0	1488
-# t_13		INT	0	1536
-# 8		INT	0	1552
 # 2		INT	0	1632
 # t_14		INT	0	1648
-# t_15		INT	0	1664
-# t_16		INT	0	1712
-# 2		INT	0	1792
-#-------------------------------------
-#-------------------------------------
+# 8		INT	0	1664
+# t_15		INT	0	1680
+# t_16		INT	0	1728
+# 2		INT	0	1808
 #-------------------------------------
 #-------------------------------------
+# i		INT	0	1264
+# 2		INT	0	1280
 #-------------------------------------
 #-------------------------------------
 #-------------------------------------
 #-------------------------------------
+# t_13		INT	0	1536
+# 8		INT	0	1552
 #-------------------------------------
 .globl main
 .data
@@ -176,7 +177,7 @@ str816: .asciz "i = i * 2 = %d\n"
 str928: .asciz "i = i / j = %d\n"
 str1120: .asciz "i = i % 3 = %d\n"
 str1312: .asciz "i = %d\n"
-str1776: .asciz "i = fun(n[%d]) = %d\n"
+str1792: .asciz "i = fun(n[%d]) = %d\n"
 .text
 
 #fun:   
@@ -189,20 +190,16 @@ L_1: sub $176, %rsp
 
 
 #L_2:  push %rdi 
-L_2: mov %rdi, -16(%rbp)
-
+L_2: 
 
 #L_3: "%d\n" rdi 
-L_3: mov $str64, %rdi
-
+L_3: 
 
 #L_4: i rsi 
-L_4: mov -16(%rbp), %rsi
-
+L_4: 
 
 #L_5:  = printf call 2
-L_5: call printf
-
+L_5: 
 
 #L_6: 176 = i ret 
 L_6: mov -16(%rbp), %rax
@@ -216,8 +213,8 @@ main: push %rbp
 mov %rsp, %rbp
 
 
-#L_8: 1888 frame 
-L_8: sub $1888, %rsp
+#L_8: 1904 frame 
+L_8: sub $1904, %rsp
 
 
 #L_9: i = 1 = 
@@ -236,16 +233,13 @@ mov %rax, -16(%rbp)
 
 
 #L_12: "i = j = %d\n" rdi 
-L_12: mov $str144, %rdi
-
+L_12: 
 
 #L_13: i rsi 
-L_13: mov -16(%rbp), %rsi
-
+L_13: 
 
 #L_14:  = printf call 2
-L_14: call printf
-
+L_14: 
 
 #L_15: t_0 = i = 
 L_15: mov -16(%rbp), %rax
@@ -265,16 +259,13 @@ mov %rax, -16(%rbp)
 
 
 #L_18: "i += j = %d\n" rdi 
-L_18: mov $str304, %rdi
-
+L_18: 
 
 #L_19: i rsi 
-L_19: mov -16(%rbp), %rsi
-
+L_19: 
 
 #L_20:  = printf call 2
-L_20: call printf
-
+L_20: 
 
 #L_21: t_2 = i = 
 L_21: mov -16(%rbp), %rax
@@ -282,11 +273,7 @@ mov %rax, -368(%rbp)
 
 
 #L_22: t_3 = t_2 - j
-L_22: mov -368(%rbp), %rax
-mov -32(%rbp), %rbx
-sub %rbx, %rax
-mov %rax, -384(%rbp)
-
+L_22: 
 
 #L_23: i = t_3 = 
 L_23: mov -384(%rbp), %rax
@@ -294,16 +281,13 @@ mov %rax, -16(%rbp)
 
 
 #L_24: "i -= j = %d\n" rdi 
-L_24: mov $str448, %rdi
-
+L_24: 
 
 #L_25: i rsi 
-L_25: mov -16(%rbp), %rsi
-
+L_25: 
 
 #L_26:  = printf call 2
-L_26: call printf
-
+L_26: 
 
 #L_27: t_4 = j + 10
 L_27: mov -32(%rbp), %rax
@@ -318,23 +302,16 @@ mov %rax, -16(%rbp)
 
 
 #L_29: "i = j + 10 = %d\n" rdi 
-L_29: mov $str576, %rdi
-
+L_29: 
 
 #L_30: i rsi 
-L_30: mov -16(%rbp), %rsi
-
+L_30: 
 
 #L_31:  = printf call 2
-L_31: call printf
-
+L_31: 
 
 #L_32: t_5 = j - i
-L_32: mov -32(%rbp), %rax
-mov -16(%rbp), %rbx
-sub %rbx, %rax
-mov %rax, -640(%rbp)
-
+L_32: 
 
 #L_33: i = t_5 = 
 L_33: mov -640(%rbp), %rax
@@ -342,23 +319,16 @@ mov %rax, -16(%rbp)
 
 
 #L_34: "i = j - i = %d\n" rdi 
-L_34: mov $str688, %rdi
-
+L_34: 
 
 #L_35: i rsi 
-L_35: mov -16(%rbp), %rsi
-
+L_35: 
 
 #L_36:  = printf call 2
-L_36: call printf
-
+L_36: 
 
 #L_37: t_6 = i * 2
-L_37: mov -16(%rbp), %rax
-mov $2, %rbx
-mulq %rbx
-mov %rax, -768(%rbp)
-
+L_37: 
 
 #L_38: i = t_6 = 
 L_38: mov -768(%rbp), %rax
@@ -366,24 +336,16 @@ mov %rax, -16(%rbp)
 
 
 #L_39: "i = i * 2 = %d\n" rdi 
-L_39: mov $str816, %rdi
-
+L_39: 
 
 #L_40: i rsi 
-L_40: mov -16(%rbp), %rsi
-
+L_40: 
 
 #L_41:  = printf call 2
-L_41: call printf
-
+L_41: 
 
 #L_42: t_7 = i / j
-L_42: mov $0, %rdx
-mov -16(%rbp), %rax
-mov -32(%rbp), %rbx
-idiv %rbx
-mov %rax, -880(%rbp)
-
+L_42: 
 
 #L_43: i = t_7 = 
 L_43: mov -880(%rbp), %rax
@@ -391,38 +353,22 @@ mov %rax, -16(%rbp)
 
 
 #L_44: "i = i / j = %d\n" rdi 
-L_44: mov $str928, %rdi
-
+L_44: 
 
 #L_45: i rsi 
-L_45: mov -16(%rbp), %rsi
-
+L_45: 
 
 #L_46:  = printf call 2
-L_46: call printf
-
+L_46: 
 
 #L_47: t_8 = i / 3
-L_47: mov $0, %rdx
-mov -16(%rbp), %rax
-mov $3, %rbx
-idiv %rbx
-mov %rax, -1008(%rbp)
-
+L_47: 
 
 #L_48: t_9 = t_8 * 3
-L_48: mov -1008(%rbp), %rax
-mov $3, %rbx
-mulq %rbx
-mov %rax, -1024(%rbp)
-
+L_48: 
 
 #L_49: t_10 = i - t_9
-L_49: mov -16(%rbp), %rax
-mov -1024(%rbp), %rbx
-sub %rbx, %rax
-mov %rax, -1056(%rbp)
-
+L_49: 
 
 #L_50: i = t_10 = 
 L_50: mov -1056(%rbp), %rax
@@ -430,64 +376,48 @@ mov %rax, -16(%rbp)
 
 
 #L_51: "i = i % 3 = %d\n" rdi 
-L_51: mov $str1120, %rdi
-
+L_51: 
 
 #L_52: i rsi 
-L_52: mov -16(%rbp), %rsi
-
+L_52: 
 
 #L_53:  = printf call 2
-L_53: call printf
-
+L_53: 
 
 #L_54: t_11 = i cmp 0
-L_54: mov -16(%rbp), %rax
-mov $0, %rbx
-cmp %rax, %rbx
-mov %rax, -1200(%rbp)
-
+L_54: 
 
 #L_55: L_57 = t_11 jl 
-L_55: jl L_57
-
+L_55: 
 
 #L_56: L_62 = t_11 jge 
-L_56: jge L_62
-
+L_56: 
 
 #L_57: i = 2 = 
 L_57: mov $2, %rax
-mov %rax, -16(%rbp)
+mov %rax, -1264(%rbp)
 
 
 #L_58: "i = %d\n" rdi 
-L_58: mov $str1312, %rdi
-
+L_58: 
 
 #L_59: i rsi 
-L_59: mov -16(%rbp), %rsi
-
+L_59: 
 
 #L_60:  = printf call 2
-L_60: call printf
-
+L_60: 
 
 #L_61: L_65 goto 
-L_61: jmp L_65
-
+L_61: 
 
 #L_62: "i = %d\n" rdi 
-L_62: mov $str1312, %rdi
-
+L_62: 
 
 #L_63: i rsi 
-L_63: mov -16(%rbp), %rsi
-
+L_63: 
 
 #L_64:  = printf call 2
-L_64: call printf
-
+L_64: 
 
 #L_65: i = 1 = 
 L_65: mov $1, %rax
@@ -495,30 +425,16 @@ mov %rax, -16(%rbp)
 
 
 #L_66: t_12 = i cmp 3
-L_66: mov -16(%rbp), %rax
-mov $3, %rbx
-cmp %rax, %rbx
-mov %rax, -1488(%rbp)
-
+L_66: 
 
 #L_67: L_72 = t_12 jle 
-L_67: jle L_72
-
+L_67: 
 
 #L_68: t_13 = i * 8
-L_68: mov -16(%rbp), %rax
-mov $8, %rbx
-mulq %rbx
-mov %rax, -1536(%rbp)
-
+L_68: 
 
 #L_69: n = t_13 []= i
-L_69: mov $n, %rax
-mov -1536(%rbp), %rbx
-add %rbx, %rax
-mov -16(%rbp), %rbx
-mov %rbx, (%rax)
-
+L_69: 
 
 #L_70: i = i + 1
 L_70: mov -16(%rbp), %rax
@@ -528,56 +444,39 @@ mov %rax, -16(%rbp)
 
 
 #L_71: L_66 goto 
-L_71: jmp L_66
-
+L_71: 
 
 #L_72: t_14 = 2 * 8
-L_72: mov $2, %rax
-mov $8, %rbx
-mulq %rbx
-mov %rax, -1648(%rbp)
-
+L_72: 
 
 #L_73: t_15 = n [] t_14
-L_73: mov $n, %rax
-mov -1648(%rbp), %rbx
-add %rbx, %rax
-mov (%rax), %rbx
-mov %rbx, -1664(%rbp)
-
+L_73: 
 
 #L_74: t_15 rdi 
-L_74: mov -1664(%rbp), %rdi
-
+L_74: 
 
 #L_75: t_16 = fun callexp 1
-L_75: call fun
-mov %rax, -1712(%rbp)
-
+L_75: 
 
 #L_76: i = t_16 = 
-L_76: mov -1712(%rbp), %rax
+L_76: mov -1728(%rbp), %rax
 mov %rax, -16(%rbp)
 
 
 #L_77: "i = fun(n[%d]) = %d\n" rdi 
-L_77: mov $str1776, %rdi
-
+L_77: 
 
 #L_78: 2 rsi 
-L_78: mov $2, %rsi
-
+L_78: 
 
 #L_79: i rdx 
-L_79: mov -16(%rbp), %rdx
-
+L_79: 
 
 #L_80:  = printf call 3
-L_80: call printf
-
+L_80: 
 
-#L_81: 1888 ret 
-L_81: add $1888, %rsp
+#L_81: 1904 ret 
+L_81: add $1904, %rsp
 pop %rbp
 ret
 
diff --git a/a4/x86/Quad.java b/a4/x86/Quad.java
index 1daaa80..46a2f70 100755
--- a/a4/x86/Quad.java
+++ b/a4/x86/Quad.java
@@ -1,3 +1,4 @@
+
 package x86;
 
 	public class Quad {
